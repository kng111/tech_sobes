"""
Гит это утилита для работы с кодом она позваляет видеть 

Кто,Когда и во сколько внёс изменения


Главные функции - ветвление,слияние,откат версии так как гит хранит в себе старые версии кода

ветка branch

слияние merge

merge conflict - ошибка при слияние ветки, гит подскажет где именно случился конфлитк при слиянии ветки 

репозиторий - это храниние кода и история изменение кода


аналоги cvs,subversion, mercurial

Консольная утилита, есть визуальное оформление ide

что бы добавить основную ветку мы делаем git init 

Работая с основным кодом 


git commit - создании снапшота версии кода 






Командой git --version можно узнать, установлен ли Git на компьютере.

После установки Git необходимо создать репозиторий, в который будет храниться код. 
Для этого в командной строке нужно перейти в папку,
 в которую нужно создать репозиторий, 
    и выполнить команду git init.

Далее необходимо добавить файлы в репозиторий. 
Для этого нужно использовать команду git add <файл>.
 После добавления всех необходимых файлов нужно создать коммит с описанием изменений.
   Для этого нужно использовать команду git commit -m "описание изменений".

Далее можно работать с репозиторием,
 добавлять новые файлы и коммитить изменения.
   Для просмотра истории изменений используется команда git log.

Для работы с гитом в командной строке есть много других команд,
 например,
   для отправки изменений на сервер используется команда git push.
"""

'''
Для добавления всех файлов в папке используйте команду:
    git add .

Для просмотра всех файлов в вашем репозитории Git, используйте команду:
    git ls-files


Если вы хотите просмотреть только определенные типы файлов, например, только скрытые файлы, используйте следующую команду:
    git ls-files --others --exclude-standard


Для просмотра конкретного файла в вашем репозитории Git, используйте команду:
    git show <имя_файла>

    
Если вы хотите добавить только определенные файлы или папки, используйте команду 
    git add <файл или папка>.
Для внесения изменений во все файлы сразу в Git используется команда 
    git add .

Для просмотра предыдущих изменений в файлах в Git используется команда 
    git diff

Чтобы просмотреть предыдущие изменения во всех файлах, включая те, которые еще не были коммиттен, используйте команду 
    git diff --staged

Если вы хотите просмотреть только определенные файлы, используйте команду 
    git diff <файл>

Если вы хотите просмотреть историю изменений файлов, используйте команду 
    git log

Для создания новой ветки в Git используется команда 
    git checkout -b <название_ветки>
         Эта команда создает новую ветку и переходит в неё.

Например, чтобы создать новую ветку с названием my-branch, введите:
    git checkout -b my-branch

Для просмотра всех веток в вашем репозитории Git,
    используйте команду 
        git branch
            Эта команда выведет список всех веток в вашем репозитории, включая текущую ветку.

Чтобы просмотреть только активные ветки, используйте команду 
    git branch --active.   

Чтобы просмотреть историю веток, используйте команду 
    git log --oneline --graph

Для перехода на ветку в Git используется команда 
    git checkout <название_ветки>
 Эта команда переводит вас на указанную ветку.

Для слияния веток в Git используется команда 
    git merge <название_ветки>.
 Эта команда сливает указанную ветку с текущей активной веткой.

 
а затем коммитить свои изменения.
Для создания нового коммита в текущей ветке используйте команду
    git commit -m "описание коммита"
'''


'''
Делаем нужные нам изменения в файлах проекта. Затем проверяем эти файлы с помощью команды: git st.

Добавляем все измененные файлы на сцену: git add . Или добавляем по одному файлу: git add address Где вместо address нужно подставить полный адрес по которому лежит файл.

Проверим, что файлы у нас добавились на сцену (теперь они должны отображаться другим цветом): git st.

Делаем коммит со сцены на свой локальный компьютер. Вместо commit message нужно написать короткую сопроводительную информацию к коммиту - из чего он состоит, что было сделано: git commit -m "commit message"

Чтобы отменить или раскоммитить коммит (how to uncommit git commit): git reset --soft HEAD~1 ИЛИ git reset --soft HEAD^ Вышеприведенная команда отменит сам факт коммита (т.е. делает uncommit, undo commit), оставляя все файлы в том же состоянии, в котором они были до применения команды git commit -m "commit message".

Пушим коммит на сервер: git push origin HEAD:refs/for/master // или stage если у вас используется stage вместо master Если вы пушите на github, то для первого пуша нужно привязать вашу локальную ветку к ветке на github, поэтому используйте команду: git push -u origin feature/name-of-branch Для дальнейших коммитов/пушей на github используйте команду без -u: git push origin feature/name-of-branch.
'''



'''
КОМАНДЫ ОСНОВНЫЕ:
'''


'''
git init: Инициализация нового репозитория. Создает новый репозиторий в текущем каталоге.

git init



git clone: Клонирование существующего репозитория.
git clone <URL_репозитория> - указания адресса где находится код проекта


git add: Добавление файлов в индекс (staging area) для последующего коммита.
git add <имя_файла>


Можно использовать . для добавления всех файлов:
git add .


git commit: Создание коммита с зафиксированными изменениями.
git commit -m "Ваш комментарий к коммиту"



git status: Просмотр состояния рабочей директории и индекса.
git status


git pull: Получение изменений из удаленного репозитория и объединение их с локальными изменениями.
git pull


git push: Отправка локальных изменений в удаленный репозиторий.
git push


git branch: Просмотр списка веток и создание новых веток.
git branch
git branch <название_ветки>



git checkout: Переключение между ветками.
git checkout <название_ветки>


Для создания новой ветки и переключения на нее:
git checkout -b <название_ветки>


git merge: Объединение веток.
git merge <название_ветки>

git log: Просмотр истории коммитов.
git log

git remote: Просмотр списка удаленных репозиториев.
git remote -v

git fetch: Получение изменений из удаленного репозитория без их объединения с локальными изменениями.
git fetch

git reset: Сброс изменений в индексе и рабочей директории.
git reset <файл>

git revert: Создание нового коммита, который отменяет предыдущий коммит.
git revert <хеш_коммита>


'''