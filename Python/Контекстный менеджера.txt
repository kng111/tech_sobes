На контекстный менеджер возлагается 2 функции:
1  - Что нужно сделать в момент когда необходим доступ к ресурсу
2  - Что нужно сделать когда доступ уже не нужен


with - контекстный менеджер

1  __enter__(self) - при заходе в блок открытии 

2  __exit__(self, type, value, traceback) - при выходе из блока

В случае возникновения исключения в метод __exit__ передается 3 параметра - type, value и traceback.


При обработке исключений важно то, что возвращает метод __exit__. Тут есть 2 варианта:

В случае, если исключение было обработано нормально метод должен вернуть True.
Возращение любого другого значения возбудит исключение, которое передадится на уровень выше.
Контекстный менеджер из генератора¶

Здесь на помощь к нам приходит contextlib. С помощью contextmanager мы можем реализовать менеджер контекста через декоратор и генераторы. Выглядит это так:

from contextlib import contextmanager

@contextmanager
def open_file(name):
    f = open(name, 'w')
    yield f
    f.close()