def my_generator(start, end):
    current = start
    while current <= end:
        yield current
        current += 1

# Используем генератор
gen = my_generator(1, 5)
for num in gen:
    print(num)

'''Определение генератора:

my_generator - это функция,
 которая содержит ключевое слово yield.
   Когда функция вызывается,
     она не выполняет код внутри себя,
       а возвращает объект генератора.
       
Использование ключевого слова yield:

Внутри цикла while используется yield current.
 Когда генератор встречает ключевое слово yield,
   он приостанавливает свое выполнение и возвращает значение current.
     В следующий раз, когда генератор вызывается снова (в цикле for),
       он возобновляет выполнение с того места, где он был приостановлен,
         увеличивает current и продолжает цикл.

Использование генератора в цикле for:

gen = my_generator(1, 5) создает генератор,
 передавая начальное и конечное значения (1 и 5) в функцию my_generator.
    Затем генератор используется в цикле for. При каждой итерации цикла происходит вызов генератора,
    и он возвращает значение current. Цикл продолжается, пока генератор не исчерпает свою последовательность.

Вывод на экран:

    В результате на экран выводятся числа от 1 до 5, так как ваш генератор генерирует значения в этом диапазоне.
        Генераторы предоставляют удобный способ создания итераторов в Python,
          особенно для работы с большими или бесконечными последовательностями данных.
            В отличие от итераторов, генераторы не загружают все значения в память сразу,
              что может быть полезным при работе с большими объемами данных.'''







'''
Генератор некий асинхронн до появления полноценного асинхронна в питоне он выдаёт не список нам а выдаёт только тогда когда мы её дёрнули 

То есть мы дёрнули её 1 раз она отдала 1 обьект 2 тогда 2
она помнит сколько обьектов она уже отдала (помнит состояние)

Но удобно лишь в малеьком классе задач


Итератор почти тоже самое но реализован с помощью классов 
но помнить что у этих классов есть методы __iter__() и __next__(). (магические методы)


'''

'''

Итератор в Python — это объект,
 который предоставляет последовательный доступ к элементам коллекции или последовательности данных.
   Объект, который реализует протокол итератора,
     должен иметь методы __iter__() и __next__().
'''
class MyIterator:
    def __init__(self, start, end):
        self.current = start
        self.end = end

    def __iter__(self):
        return self

    def __next__(self):
        if self.current >= self.end:
            raise StopIteration
        else:
            result = self.current
            self.current += 1
            return result

# Использование итератора в цикле
my_iterator = MyIterator(1, 5)
for value in my_iterator:
    print(value)


'''
В этом примере MyIterator — это класс,
 реализующий итератор,
   который создает последовательность чисел от 1 до 4 и предоставляет к ним доступ через цикл for.
'''