Некий шаблон кода который помогает реализовать код ( псевдо правильное написание кода ) 

У каждого своё виденье 

Singleton (Одиночка):
Гарантирует, что у класса есть только один экземпляр, и предоставляет глобальную точку доступа к этому экземпляру.

Фабричный метод (Factory Method):
Предоставляет интерфейс для создания объектов в суперклассе, но позволяет подклассам изменять тип создаваемых объектов.


Наблюдатель (Observer):
Определяет зависимость "один ко многим" между объектами так, чтобы при изменении состояния одного объекта все зависящие от него объекты были уведомлены и обновлены.


Стратегия (Strategy):
Определяет семейство алгоритмов, инкапсулирует каждый из них и обеспечивает их взаимозаменяемость.

Декоратор (Decorator):
Позволяет динамически добавлять новую функциональность объекту.



 SOLID (пять основных принципов объектно-ориентированного программирования и проектирования). Я могу уточнить, какие именно принципы SOLID отражаются в каждом из примеров:


Singleton (Одиночка): В отсутствие корректной реализации, такая реализация может нарушить принцип единственной обязанности (Single Responsibility Principle), так как класс сам занимается управлением своим единственным экземпляром.

Фабричный метод (Factory Method): Связан с принципом открытости/закрытости (Open/Closed Principle), так как он позволяет добавлять новые продукты, не изменяя код существующих создателей и продуктов.

Наблюдатель (Observer): Этот паттерн поддерживает принцип инверсии зависимостей (Dependency Inversion Principle), так как наблюдатель зависит от абстракции (субъекта), а не от конкретных классов.

Стратегия (Strategy): Также связан с принципом открытости/закрытости. Клиентский код может выбирать и встраивать нужную стратегию, не модифицируя сам контекст.

Декоратор (Decorator): Этот паттерн также соответствует принципу открытости/закрытости. Вы можете добавлять новое поведение к объекту, не изменяя его структуру.

Принципы SOLID - это основополагающие принципы объектно-ориентированного дизайна, и хорошо спроектированные программы обычно следуют этим принципам для обеспечения гибкости, расширяемости и поддержки изменений.

