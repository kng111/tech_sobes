'''
Миксин (mix-in, анг. “примесь”),
 паттерн проектирования в ООП,
   когда в цепочку наследования добавляется небольшой класс-помощник. Например, есть класс


'''
import datetime

class NowMixin(object):
    def now(self):
        return datetime.datetime.utcnow()

# Создаем экземпляр класса NowMixin
main = NowMixin()

# Вызываем метод now() через экземпляр
result = main.now()

# Выводим результат
print(result)


'''
В названия миксинов принято добавлять слово Mixin,
 так как не существует никакого механизма для понимания полноценный это класс или миксин.
   Миксин технически является самым обычным классом.

'''

'''
Миксины это класс “примесь”, который позволяет добавлять функциональность к классу
'''

class Mixin:
    def mixin_method(self):
        print("This is a mixin method.")

class MyClass(Mixin):
    def my_method(self):
        self.mixin_method()

obj = MyClass()
obj.my_method() # Output: This is a mixin method.


'''
Зачем они нужны?

Они позволяют добавлять новую функциональность в классы, не изменяя их иерархии наследования.


Позволяют создавать модульный и гибкий код.
 Вы можете создавать миксины для разных задач и добавлять их в свои классы по мере необходимости


Миксины могут быть использованы для решения общих задач,
 которые возникают в разных классах.
   Например, миксин для логирования или кеширования результатов методов.
     Это позволяет сэкономить время на написании повторяющегося кода и упрощает его поддержку в будущем.

'''