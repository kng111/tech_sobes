# Пример с применением принципа единственной ответственности

class Report:
    def __init__(self, title, content):
        self.title = title
        self.content = content

    def generate_report(self, formatter):
        # Генерация отчета с использованием переданного форматтера
        return formatter.format(self.title, self.content)

class PDFFormatter:
    def format(self, title, content):
        # Форматирование отчета в формат PDF
        pass

class DatabaseSaver:
    def save(self, report):
        # Сохранение отчета в базу данных
        pass



''' Каждый класс должен решать лишь одну задачу.

Принцип единственной ответственности гласит,
 что класс должен быть ответственным только за одну важную аспектную часть функциональности.
   Это означает, что если у класса более одной причины для изменения,
     то лучше разделить его на несколько классов,
       каждый из которых будет ответственен только за одну аспектную часть.
'''


'''ПЛЮСЫ: В долгосроке лучше

    Применение SOLID-принципов не всегда подразумевает простоту написания кода в краткосрочной перспективе,
        но в долгосрочной перспективе они способствуют созданию более поддерживаемого,
            гибкого и расширяемого кода.
'''

'''
Понятность и читаемость кода

Устойчивость к изменениям

Повторное использование кода

Тестирование

Масштабируемость
'''