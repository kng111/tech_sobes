"""
Объектом зависимости должна быть абстракция, а не что-то конкретное.
"""

"""
Объектом зависимости должна быть абстракция, а не что-то конкретное.
Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций.
Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
"""

"""
Принцип инверсии зависимостей означает зависимость от абстракций,
 не конкретных реализаций.
   Это делает код гибким, обеспечивает легкость внесения изменений и добавления нового функционала
"""
from abc import ABC, abstractmethod

# Абстракция для устройства
class Device(ABC):
    @abstractmethod
    def turn_on(self):
        pass

    @abstractmethod
    def turn_off(self):
        pass

# Конкретное устройство - лампа
class Lamp(Device):
    def turn_on(self):
        print("Lamp is ON")

    def turn_off(self):
        print("Lamp is OFF")

# Класс, который зависит от абстракции (Device)
class Switch:
    def __init__(self, device):
        self.device = device

    def operate(self):
        self.device.turn_on()
        self.device.turn_off()  # Добавляем вызов метода turn_off

# Использование
lamp = Lamp()
switch = Switch(lamp)
switch.operate()

"""
Принцип инверсии зависимостей (DIP):

Абстракции вместо деталей: Зависимость от абстракций (интерфейсов) вместо конкретных реализаций.

Обратная зависимость: Высокоуровневые модули контролируют низкоуровневые через абстракции.

Легкость внесения изменений: Упрощает внесение изменений и добавление нового функционала.

Тестирование: Облегчает тестирование, позволяя использовать заглушки или макеты.

Расширяемость: Новый функционал легко добавляется через новые реализации абстракций.
"""

"""
Принцип инверсии зависимостей предлагает строить гибкие и расширяемые системы,
 используя абстракции вместо конкретных реализаций.
   Это позволяет высокоуровневым модулям зависеть от абстракций,
     а не от деталей низкоуровневых модулей.
       Такой подход делает код более гибким,
         обеспечивает легкость внесения изменений и добавления нового функционала без изменения существующего кода.
           Принцип также способствует лучшей тестированию и обеспечивает более высокий уровень абстракции в системе."""