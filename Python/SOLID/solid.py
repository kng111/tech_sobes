"""

SOLID - Основные принципы:

Принцип единственной ответственности (Single Responsibility Principle, SRP):

Каждый класс должен иметь только одну причину для изменения.
Принцип открытости/закрытости (Open/Closed Principle, OCP):

Программные сущности (классы, модули) должны быть открыты для расширения, но закрыты для изменения.
Принцип подстановки Барбары Лисков (Liskov Substitution Principle, LSP):

Объекты базового класса могут быть заменены объектами его подклассов без изменения корректности программы.
Принцип интерфейсов (Interface Segregation Principle, ISP):

Не должно быть клиентов, зависящих от методов, которые они не используют. 
Клиенты не должны вынужденно зависеть от интерфейсов, которые они не используют.
Принцип инверсии зависимостей (Dependency Inversion Principle, DIP):

Зависимость должна строиться на абстракциях, а не на деталях. Высокоуровневые модули не должны зависеть от низкоуровневых

"""


"""

Принцип единственной ответственности (SRP):

"SRP гласит, что каждый класс должен иметь только одну причину для изменения. 
Это помогает создавать более поддерживаемый и гибкий код, разделяя ответственности между классами."
Принцип открытости/закрытости (OCP):

"OCP утверждает, что программные сущности должны быть открыты для расширения, но закрыты для изменения. 
Это позволяет добавлять новый функционал, не модифицируя существующий код."
Принцип подстановки Барбары Лисков (LSP):

"LSP гласит, что объекты подклассов должны быть способны заменять объекты базового класса без изменения корректности программы. 
Это обеспечивает согласованное поведение в иерархии классов."
Принцип интерфейсов (ISP):

"ISP предполагает, что клиенты не должны зависеть от методов, которые они не используют. 
Это помогает избежать ненужной зависимости и делает интерфейсы более специфичными для конкретных клиентов."
Принцип инверсии зависимостей (DIP):

"DIP предлагает, что зависимость должна строиться на абстракциях, а не на деталях. 
Высокоуровневые модули не должны зависеть от низкоуровневых, что делает систему более гибкой."

"""


"""
Какой принцип лучший?
Почему лучше использовать или не использовать эти принципы 


Нет однозначного ответа на вопрос о том, какой из принципов SOLID лучше. 
Все эти принципы разработаны для обеспечения гибкости, 
удобства поддержки и расширяемости кода. 
Выбор того, какие принципы применять, зависит от конкретной ситуации, требований проекта и контекста.
"""


"""
Принцип единственной ответственности (SRP):
Когда использовать: Этот принцип полезен, 
когда класс выполняет только одну задачу и несет ответственность только за один аспект системы.
Когда не использовать: В некоторых случаях можно допустить небольшое нарушение этого принципа, 
если это приводит к улучшению читаемости и поддерживаемости кода.

Принцип открытости/закрытости (OCP):
Когда использовать: Применяется, когда важно, чтобы код был открыт для расширения, но закрыт для изменения. 
Это упрощает добавление нового функционала без изменения существующего кода.
Когда не использовать: В простых случаях, когда изменения кода не представляют собой проблем.

Принцип подстановки Барбары Лисков (LSP):
Когда использовать: Важен в контексте иерархий классов, чтобы подклассы можно было безопасно использовать вместо базовых классов.
Когда не использовать: Если применение этого принципа ведет к избыточному усложнению кода или усложняет его понимание.

Принцип интерфейсов (ISP):
Когда использовать: Полезен, когда требуется избежать зависимости клиентов от методов, которые они не используют.
Когда не использовать: В случаях, когда интерфейс слишком обширен и неудобен для клиентов.

Принцип инверсии зависимостей (DIP):
Когда использовать: Важен, чтобы создать гибкие и переиспользуемые компоненты, 
позволяя высокоуровневым модулям зависеть от абстракций, а не от конкретных реализаций.
Когда не использовать: В простых случаях, когда нет необходимости в высокой гибкости зависимостей.
"""