import pytest

from test_module import zxc


def test_my_function(capsys):
    # Запуск функции
    zxc()

    # Перехватывание вывода
    captured = capsys.readouterr()

    # Ожидаемый вывод
    expected_output = "0\n1\n2\n3\n4\n5\n6\n7\n8\n9"

    # Проверка, что вывод совпадает с ожидаемым
    assert captured.out.strip() == expected_output


'''Перехватывание вывода при тестировании имеет несколько целей:

Автоматизация проверки вывода: 
При использовании фреймворков для тестирования, таких как pytest, unittest или других, перехватывание вывода позволяет автоматизировать проверку вывода функции. Вы можете сравнивать фактический вывод с ожидаемым результатом в вашем тесте.

Изоляция тестов: 
Перехватывание вывода позволяет изолировать тесты от внешних эффектов. Если ваша функция печатает что-то на консоль, и вам нужно убедиться, что эти данные корректны, перехватывание вывода позволяет вам проверить их без реального вывода на экран.

Тестирование функций без побочных эффектов: 
В тестах предпочтительно избегать побочных эффектов, таких как вывод на консоль. Перехватывание вывода позволяет вам тестировать функции, которые печатают результаты, без реального вывода, что делает тесты более предсказуемыми и легко поддерживаемыми.

Пример,
 который я предоставил ранее с использованием capsys в pytest,
 иллюстрирует этот подход.
   Он позволяет перехватить вывод на консоль и использовать его для проверки ожидаемого результата в тестах.
'''