# def test_addition():
#     assert 1 + 1 == 2
'''
assert - это ключевое слово в Python,
 используемое для проверки утверждений.
   Утверждения представляют собой выражения,
     которые должны быть истинными во время выполнения программы.
'''

# test_addition()


def my_function():
    return "Hello, World!"



def test_my_function():
    result = my_function()
    assert result == "Hello, World!"


'''
pytest test_module.py::test_function

test_module.py - это имя файла с тестами.
test_function - это имя функции, которую вы хотите выполнить.

Если текущая директория, в которой вы находитесь,
 содержит файл test_module.py,
   то команда выше запустит только тест с именем test_function из этого файла.
'''

def x_test_zxc():
    for i in range(10):
        print(i)

def zxc():
    for i in range(10):
        print(i)

# def test_zxc():
#     zxc() 

'''
Однако автоматическое тестирование,
 особенно с использованием фреймворка,
   такого как pytest,
     имеет свои преимущества в более сложных сценариях и в долгосрочной перспективе:

Автоматизация: При наличии тестов вы можете легко автоматизировать процесс проверки.
 Это может быть полезно,
   когда у вас много тестов,
     и вы хотите проверять свой код регулярно.

Обнаружение изменений: Тесты могут служить инструментом для обнаружения непреднамеренных изменений в вашем коде.
 Если вы внесли изменения, и тесты не проходят,
   это может сигнализировать о том, что вы что-то сломали.

Документация: Тесты также могут служить в качестве документации.
 Они показывают, как ваш код должен вести себя в различных ситуациях,
   и для новых разработчиков они могут быть полезным ресурсом.

Безопасность изменений: При наличии тестов вам может быть увереннее внедрять изменения в код,
 зная, что вы автоматически проверите его на соответствие ожидаемому поведению.

Как правило, баланс между ручной проверкой и автоматическим тестированием зависит от конкретных требований проекта,
 его размера, сложности и ожидаемого срока службы.
'''